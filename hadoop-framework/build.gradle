archivesBaseName = 'commons.hadoop-framework'

eclipse {
  project {
    name = 'commons.hadoop-framework'
  }
}


repositories {
  maven {
    url "http://clojars.org/repo"
  }
}

configurations.all {
  exclude(group: 'ring', name: 'ring-core', version: '0.3.11')

  resolutionStrategy {
    force 'com.google.guava:guava:13.0'
  }
}

dependencies {
  compile project(':utils')
  compile project(':api')
  compile project(':netty')
  compile project(':cluster')

  compile group: 'com.beust', name: 'jcommander', version: '1.35'

  //compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.6.0'
  compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.4.0'

  //compile group: 'org.apache.storm', name: 'storm-core', version: '0.9.1-incubating'
  compile group: 'storm', name: 'storm', version: '0.8.1'
  
  compile group: 'org.twitter4j', name: 'twitter4j-core', version: '3.0.3'
  compile group: 'org.twitter4j', name: 'twitter4j-stream', version: '3.0.3'

  compile group: 'org.apache.mrunit', name: 'mrunit', version: '1.0.0', classifier: 'hadoop2'
  compile group: 'com.google.guava', name: 'guava', version: '13.0'

}


clean.doLast {
  new File("target").deleteDir() ;
  println("Delete target......................................") ;
}

task createHelloAppHome(dependsOn: 'build') << {
  def appHomeDir = "${buildDir}/hello"
  createHelloAppHome(appHomeDir)
}

def createHelloAppHome(String appHomeDir) {
  println "\n\n"
  println "*************************************************"
  println "Preparing the app home directory ${appHomeDir}"
  println "*************************************************"

  def jars = [ 
    "commons.utils", "commons.netty",
    "jackson-core-2.2.2", "jackson-databind", "jackson-annotations", "jcommander", "netty-all", "compiler-0.8.16"
  ] 

  println "Copy the dependencies library"
  configurations.compile.each { File file -> 
    if(isIn(jars, file)) {
      println "  Copy $file.name to $appHomeDir"
      copy {
        from file
        into "${appHomeDir}/libs"
      }
    }
  }

  copy {
    from "${buildDir}/libs"
    into "${appHomeDir}/libs"
  }
}

def isIn(set, File file) {
  for(item in set) {
    if(file.name.startsWith(item)) return true ;
  }
  return false ;
}
